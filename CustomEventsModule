using { /Verse.org/Simulation }
using { /Fortnite.com/Devices }
using { /Fortnite.com/Characters }
using { /Verse.org/Concurrency }

SubscribableEvents := module:

    #can be canceled but can not be grouped into an array of cancelables
    generic_event<public>(payload:type) := class<unique>(signalable(payload)):

        #array of methods to call on Signal()
        Callbacks : []type{func(:payload):void} = array{}

        #return an instance of this event with an empty array of callback methods
        Cancel<public>()<transacts>:generic_event(payload)=
            NewSelf := generic_event(payload):
                Callbacks := array{}

        #return an instance of this event with the method passed in added to whatever existed in callbacks prior
        Subscribe<public>(Func:type{func(:payload):void}):generic_event(payload)=
            NewCallbacks := Callbacks + array{Func}
            NewSelf := generic_event(payload):
                Callbacks := NewCallbacks
            return NewSelf

        #invoke all callback methods
        Signal<override>(Payload:payload):void={for(Callback:Callbacks){Callback(Payload)}}

    #way cleaner to use if written "per type" | you can implement this for just about any type you want, you can also remove the awaitable interface if you do not need it to make it smaller
    #a way to manage canceling individual callbacks
    cancelable_agent_callback := class(cancelable):
        var callback : ?type{func(:agent):void} = false
        Cancel<override>()<transacts>:void={set callback = false}
        Invoke(Payload:agent):void={if(Callback := callback?){Callback(Payload)}}
            
    #a wrapper to pass extra params when subscribing | Passes InputFunc into Subscribe()
    agent_wrapper<public>(t:type) := class():
        ExtraData<public> : t
        OutputFunc<public>  : tuple(agent, t) -> void
        InputFunc<public> (Agent:agent):void=OutputFunc(Agent, ExtraData)

    # an example of an event for type agent
    agent_event <public> := class(signalable(agent), awaitable(agent)):

        #array of individually cancelable methods to call on Signal()
        var Callbacks : []cancelable_agent_callback = array{}

        #Build a new instance of cancelable_agent_callback | add new instance to array of callbacks | return NewCallback for cancelable management
        Subscribe<public>(Callback:type{__(:agent):void})<transacts>:cancelable=
            NewCallback := cancelable_agent_callback{callback := option{Callback}}
            set Callbacks += array{NewCallback}
            return NewCallback

        #Allows Generically passing extra params 
        #initializes a parametric agent_wrapper instance 
        #the agent_wrapper instance creates a method that just takes an agent | that will call the method passed in with the extra param 
        SubscribeAgent<public>(OutputFunc : tuple(agent, t)->void, ExtraData : t where t:type):cancelable=
            Wrapper := agent_wrapper(t){ExtraData := ExtraData, OutputFunc := OutputFunc}
            Subscribe(Wrapper.InputFunc)

        #for managing Await() / to avoid signaling AwaitableEvent when we don't need to
        var IsAwaiting : logic = false

        #for Await() since my brain isn't quite big enough to deal with how Await could possibly work lol
        AwaitableEvent : event(agent) = event(agent){}
            
        #Signals Paramter for Await() if IsWaiting = true 
        #Calls Invoke on all Callbacks
        Signal<override>(InAgent:agent):void=
            if(IsAwaiting?){AwaitableEvent.Signal(InAgent)}
            for(Callback:Callbacks){Callback.Invoke(InAgent)}

        #Awaits Signal to be called returning what ever signal passed
        Await<override>()<suspends>:agent=
            set IsAwaiting = true
            Agent := AwaitableEvent.Await()
            set IsAwaiting = false
            return Agent


